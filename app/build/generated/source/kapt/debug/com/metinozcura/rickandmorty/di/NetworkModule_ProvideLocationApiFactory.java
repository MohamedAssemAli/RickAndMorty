// Generated by Dagger (https://dagger.dev).
package com.metinozcura.rickandmorty.di;

import com.metinozcura.rickandmorty.data.service.LocationApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideLocationApiFactory implements Factory<LocationApi> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvideLocationApiFactory(NetworkModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public LocationApi get() {
    return provideLocationApi(module, retrofitProvider.get());
  }

  public static NetworkModule_ProvideLocationApiFactory create(NetworkModule module,
      Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvideLocationApiFactory(module, retrofitProvider);
  }

  public static LocationApi provideLocationApi(NetworkModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideLocationApi(retrofit));
  }
}
