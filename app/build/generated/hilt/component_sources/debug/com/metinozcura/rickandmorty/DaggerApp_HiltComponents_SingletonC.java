// Generated by Dagger (https://dagger.dev).
package com.metinozcura.rickandmorty;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import com.metinozcura.rickandmorty.data.db.AppDB;
import com.metinozcura.rickandmorty.data.repository.character.CharacterRepositoryImpl;
import com.metinozcura.rickandmorty.data.repository.episode.EpisodeRepositoryImpl;
import com.metinozcura.rickandmorty.data.repository.location.LocationRepositoryImpl;
import com.metinozcura.rickandmorty.data.service.CharacterApi;
import com.metinozcura.rickandmorty.data.service.EpisodeApi;
import com.metinozcura.rickandmorty.data.service.LocationApi;
import com.metinozcura.rickandmorty.di.DBModule;
import com.metinozcura.rickandmorty.di.DBModule_ProvideDatabaseFactory;
import com.metinozcura.rickandmorty.di.NetworkModule;
import com.metinozcura.rickandmorty.di.NetworkModule_ProvideCharacterApiFactory;
import com.metinozcura.rickandmorty.di.NetworkModule_ProvideEpisodeApiFactory;
import com.metinozcura.rickandmorty.di.NetworkModule_ProvideGsonFactory;
import com.metinozcura.rickandmorty.di.NetworkModule_ProvideHttpLoggingInterceptorFactory;
import com.metinozcura.rickandmorty.di.NetworkModule_ProvideLocationApiFactory;
import com.metinozcura.rickandmorty.di.NetworkModule_ProvideOkHttpClientFactory;
import com.metinozcura.rickandmorty.di.NetworkModule_ProvideRetrofitFactory;
import com.metinozcura.rickandmorty.ui.adapter.CharacterAdapter;
import com.metinozcura.rickandmorty.ui.adapter.EpisodeAdapter;
import com.metinozcura.rickandmorty.ui.adapter.LocationAdapter;
import com.metinozcura.rickandmorty.ui.characters.CharactersFragment;
import com.metinozcura.rickandmorty.ui.characters.CharactersFragment_MembersInjector;
import com.metinozcura.rickandmorty.ui.characters.CharactersViewModel;
import com.metinozcura.rickandmorty.ui.characters.CharactersViewModel_HiltModules_KeyModule_ProvideFactory;
import com.metinozcura.rickandmorty.ui.episodes.EpisodesFragment;
import com.metinozcura.rickandmorty.ui.episodes.EpisodesFragment_MembersInjector;
import com.metinozcura.rickandmorty.ui.episodes.EpisodesViewModel;
import com.metinozcura.rickandmorty.ui.episodes.EpisodesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.metinozcura.rickandmorty.ui.locations.LocationsFragment;
import com.metinozcura.rickandmorty.ui.locations.LocationsFragment_MembersInjector;
import com.metinozcura.rickandmorty.ui.locations.LocationsViewModel;
import com.metinozcura.rickandmorty.ui.locations.LocationsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.metinozcura.rickandmorty.ui.main.MainActivity;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC extends App_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final NetworkModule networkModule;

  private final DBModule dBModule;

  private final DaggerApp_HiltComponents_SingletonC singletonC = this;

  private Provider<Gson> provideGsonProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<CharacterApi> provideCharacterApiProvider;

  private Provider<EpisodeApi> provideEpisodeApiProvider;

  private Provider<AppDB> provideDatabaseProvider;

  private Provider<LocationApi> provideLocationApiProvider;

  private DaggerApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, DBModule dBModuleParam,
      NetworkModule networkModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.networkModule = networkModuleParam;
    this.dBModule = dBModuleParam;
    initialize(applicationContextModuleParam, dBModuleParam, networkModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private CharacterRepositoryImpl characterRepositoryImpl() {
    return new CharacterRepositoryImpl(provideCharacterApiProvider.get());
  }

  private EpisodeRepositoryImpl episodeRepositoryImpl() {
    return new EpisodeRepositoryImpl(provideEpisodeApiProvider.get(), provideDatabaseProvider.get());
  }

  private LocationRepositoryImpl locationRepositoryImpl() {
    return new LocationRepositoryImpl(provideLocationApiProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam,
      final DBModule dBModuleParam, final NetworkModule networkModuleParam) {
    this.provideGsonProvider = DoubleCheck.provider(new SwitchingProvider<Gson>(singletonC, 2));
    this.provideHttpLoggingInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<HttpLoggingInterceptor>(singletonC, 4));
    this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 3));
    this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 1));
    this.provideCharacterApiProvider = DoubleCheck.provider(new SwitchingProvider<CharacterApi>(singletonC, 0));
    this.provideEpisodeApiProvider = DoubleCheck.provider(new SwitchingProvider<EpisodeApi>(singletonC, 5));
    this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDB>(singletonC, 6));
    this.provideLocationApiProvider = DoubleCheck.provider(new SwitchingProvider<LocationApi>(singletonC, 7));
  }

  @Override
  public void injectApp(App app) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private DBModule dBModule;

    private NetworkModule networkModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder dBModule(DBModule dBModule) {
      this.dBModule = Preconditions.checkNotNull(dBModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (dBModule == null) {
        this.dBModule = new DBModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new DaggerApp_HiltComponents_SingletonC(applicationContextModule, dBModule, networkModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public App_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public App_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends App_HiltComponents.FragmentC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectCharactersFragment(CharactersFragment charactersFragment) {
      injectCharactersFragment2(charactersFragment);
    }

    @Override
    public void injectEpisodesFragment(EpisodesFragment episodesFragment) {
      injectEpisodesFragment2(episodesFragment);
    }

    @Override
    public void injectLocationsFragment(LocationsFragment locationsFragment) {
      injectLocationsFragment2(locationsFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private CharactersFragment injectCharactersFragment2(CharactersFragment instance) {
      CharactersFragment_MembersInjector.injectCharacterAdapter(instance, new CharacterAdapter());
      return instance;
    }

    private EpisodesFragment injectEpisodesFragment2(EpisodesFragment instance) {
      EpisodesFragment_MembersInjector.injectEpisodeAdapter(instance, new EpisodeAdapter());
      return instance;
    }

    private LocationsFragment injectLocationsFragment2(LocationsFragment instance) {
      LocationsFragment_MembersInjector.injectLocationAdapter(instance, new LocationAdapter());
      return instance;
    }
  }

  private static final class ViewCImpl extends App_HiltComponents.ViewC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(3).add(CharactersViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(EpisodesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LocationsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<CharactersViewModel> charactersViewModelProvider;

    private Provider<EpisodesViewModel> episodesViewModelProvider;

    private Provider<LocationsViewModel> locationsViewModelProvider;

    private ViewModelCImpl(DaggerApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.charactersViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.episodesViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.locationsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(3).put("com.metinozcura.rickandmorty.ui.characters.CharactersViewModel", (Provider) charactersViewModelProvider).put("com.metinozcura.rickandmorty.ui.episodes.EpisodesViewModel", (Provider) episodesViewModelProvider).put("com.metinozcura.rickandmorty.ui.locations.LocationsViewModel", (Provider) locationsViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.metinozcura.rickandmorty.ui.characters.CharactersViewModel 
          return (T) new CharactersViewModel(singletonC.characterRepositoryImpl());

          case 1: // com.metinozcura.rickandmorty.ui.episodes.EpisodesViewModel 
          return (T) new EpisodesViewModel(singletonC.episodeRepositoryImpl());

          case 2: // com.metinozcura.rickandmorty.ui.locations.LocationsViewModel 
          return (T) new LocationsViewModel(singletonC.locationRepositoryImpl());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerApp_HiltComponents_SingletonC singletonC, Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerApp_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.metinozcura.rickandmorty.data.service.CharacterApi 
        return (T) NetworkModule_ProvideCharacterApiFactory.provideCharacterApi(singletonC.networkModule, singletonC.provideRetrofitProvider.get());

        case 1: // retrofit2.Retrofit 
        return (T) NetworkModule_ProvideRetrofitFactory.provideRetrofit(singletonC.networkModule, singletonC.provideGsonProvider.get(), singletonC.provideOkHttpClientProvider.get());

        case 2: // com.google.gson.Gson 
        return (T) NetworkModule_ProvideGsonFactory.provideGson(singletonC.networkModule);

        case 3: // okhttp3.OkHttpClient 
        return (T) NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(singletonC.networkModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.provideHttpLoggingInterceptorProvider.get());

        case 4: // okhttp3.logging.HttpLoggingInterceptor 
        return (T) NetworkModule_ProvideHttpLoggingInterceptorFactory.provideHttpLoggingInterceptor(singletonC.networkModule);

        case 5: // com.metinozcura.rickandmorty.data.service.EpisodeApi 
        return (T) NetworkModule_ProvideEpisodeApiFactory.provideEpisodeApi(singletonC.networkModule, singletonC.provideRetrofitProvider.get());

        case 6: // com.metinozcura.rickandmorty.data.db.AppDB 
        return (T) DBModule_ProvideDatabaseFactory.provideDatabase(singletonC.dBModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 7: // com.metinozcura.rickandmorty.data.service.LocationApi 
        return (T) NetworkModule_ProvideLocationApiFactory.provideLocationApi(singletonC.networkModule, singletonC.provideRetrofitProvider.get());

        default: throw new AssertionError(id);
      }
    }
  }
}
